import cv2
import winsound
import numpy as np
import dlib
import pandas
import matplotlib
from imutils import face_utils
duration = 1000  # milliseconds

freq = 440  # Hz

#import keras
import serial
s = serial.Serial('COM4',9600)
cap = cv2.VideoCapture(0)

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

#status marking for current state
sleep =0 
drowsy= 0
active =0
status =""
color= (0,0,0)

def compute(ptA,ptB):
    dist = np.linalg.norm(ptA - ptB)
    return dist

def blinked(a,b,c,d,e,f):
    up = compute(b,d) + compute(c,e)
    down = compute(a,f)
    ratio = up/(2.0*down)
    #checking if it is blinked
    if(ratio>0.20):
        return 2
    elif(ratio>0.15 and ratio<=0.20):
        return 1
    else:
        return 0
while True:
    _, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = detector(gray)
    for face in faces:
        x1 = face.left()
        y1 = face.top()
        x2 = face.right()
        y2 = face.bottom()
        #cv2.rectangle(frame,(x1,y1),(x2,y2),(0,255,0),3)
        #print(face)
        landmarks = predictor(gray,face)
        for n in range(0,68):
            x = landmarks.part(n).x
            y = landmarks.part(n).y
            cv2.circle(frame, (x, y), 1, (255,0,0),-1)
        #print(x, y)
        #print(landmarks)
        landmarks = face_utils.shape_to_np(landmarks)
        left_blink = blinked(landmarks[36],landmarks[37],landmarks[38],
             landmarks[39],landmarks[40],landmarks[41])
        right_blink = blinked(landmarks[42],landmarks[43],
            landmarks[44],landmarks[47],landmarks[46],landmarks[45])
        
        if(left_blink==0 or right_blink==0):
            sleep +=1
            drowsy = 0
            active=0
            if(sleep>20):
                s.write(b's')
                status="SLEEPING"
                #winsound.Beep(freq, duration)
                color = (255,0,0)
        elif(left_blink==1 or right_blink==1):
            sleep = 0
            active = 0
            drowsy+=1
            if(drowsy>20):
                s.write(b'd')
                status= "drowsy"
                #winsound.Beep(freq, duration)
                color = (0,0,255)
        else:
            drowsy=0
            active+=1
            sleep=0
            if(active>10):
                s.write(b'a')
                status= "active"
                color = (0,255,0)

        cv2.putText(frame, status, (100,100), cv2.FONT_HERSHEY_SIMPLEX,1.2, color, 3)

        for n in range(0, 68):
            (x,y)= landmarks[n]
            cv2.circle(frame, (x, y), 1,(255,0,0),1)

    cv2.imshow("Frame",frame)
    cv2.imshow("Result of detector",frame)
    key = cv2.waitKey(1)
    if key ==13:
        break

